#!/usr/bin/env node

import { query } from './src/database/db-connector.js';

// Additional icon mappings for common adjectives and other word types
const additionalMappings = {
  // Size adjectives
  'b√ºy√ºk': 'fas fa-expand',
  'k√º√ß√ºk': 'fas fa-compress',
  'geni≈ü': 'fas fa-expand',
  'dar': 'fas fa-compress',
  'uzun': 'fas fa-ruler-vertical',
  'kƒ±sa': 'fas fa-ruler-horizontal',
  'y√ºksek': 'fas fa-arrow-up',
  'al√ßak': 'fas fa-arrow-down',
  'kalƒ±n': 'fas fa-bold',
  'ince': 'fas fa-bold',
  'gen√ß': 'fas fa-user',
  
  // Quality adjectives
  'iyi': 'fas fa-thumbs-up',
  'k√∂t√º': 'fas fa-thumbs-down',
  'g√ºzel': 'fas fa-heart',
  '√ßirkin': 'fas fa-thumbs-down',
  'temiz': 'fas fa-broom',
  'kirli': 'fas fa-broom',
  'yeni': 'fas fa-star',
  'eski': 'fas fa-clock',
  'hƒ±zlƒ±': 'fas fa-bolt',
  'yava≈ü': 'fas fa-snail',
  'sƒ±cak': 'fas fa-fire',
  'soƒüuk': 'fas fa-snowflake',
  'sert': 'fas fa-hammer',
  'yumu≈üak': 'fas fa-cloud',
  'hafif': 'fas fa-feather',
  'aƒüƒ±r': 'fas fa-weight-hanging',
  'dolu': 'fas fa-box',
  'bo≈ü': 'fas fa-box-open',
  'pahalƒ±': 'fas fa-money-bill',
  'ucuz': 'fas fa-tag',
  'zengin': 'fas fa-money-bill',
  
  // Condition adjectives
  'saƒülam': 'fas fa-check',
  'bozuk': 'fas fa-xmark',
  'kƒ±rƒ±k': 'fas fa-xmark',
  '√ßalƒ±≈üan': 'fas fa-check',
  'durgun': 'fas fa-pause',
  'aktif': 'fas fa-check',
  'pasif': 'fas fa-pause',
  'a√ßƒ±k': 'fas fa-door-open',
  'kapalƒ±': 'fas fa-door-closed',
  'parlak': 'fas fa-star',
  'd√ºz': 'fas fa-minus',
  'eƒüri': 'fas fa-wave-square',
  'dik': 'fas fa-arrow-up',
  
  // Difficulty adjectives
  'kolay': 'fas fa-face-smile',
  'zor': 'fas fa-face-frown',
  'basit': 'fas fa-face-smile',
  'karma≈üƒ±k': 'fas fa-face-frown',
  'normal': 'fas fa-equals',
  
  // Importance adjectives
  '√∂nemli': 'fas fa-star',
  '√∂nemsiz': 'fas fa-star-half-stroke',
  'g√ºvenli': 'fas fa-shield-halved',
  'tehlikeli': 'fas fa-skull',
  'doƒüru': 'fas fa-check',
  'yanlƒ±≈ü': 'fas fa-xmark',
  'haklƒ±': 'fas fa-check',
  'haksƒ±z': 'fas fa-xmark',
  'me≈ügul': 'fas fa-briefcase',
  'tembel': 'fas fa-couch',
  '√ßalƒ±≈ükan': 'fas fa-briefcase',
  
  // Other common adjectives
  'zeki': 'fas fa-lightbulb',
  'aptal': 'fas fa-lightbulb',
  'akƒ±llƒ±': 'fas fa-lightbulb',
  'gev≈üek': 'fas fa-loose',
  'sƒ±kƒ±': 'fas fa-grip',
  'rahat': 'fas fa-couch',
  'rahatsƒ±z': 'fas fa-bed',
  'lezzetli': 'fas fa-utensils',
  'tatsƒ±z': 'fas fa-utensils'
};

async function enhanceAdditionalIcons() {
  try {
    console.log('üé® Enhancing additional vocabulary icons...');
    
    // Get all active vocabulary items with default icons
    const vocabulary = await query(`
      SELECT id, turkish_text, svg_icon
      FROM vocabulary
      WHERE svg_icon = 'fas fa-book' AND is_active = 1
    `);
    
    console.log(`üìä Processing ${vocabulary.length} vocabulary items with default icons...`);
    
    let updatedCount = 0;
    
    // Process each vocabulary item
    for (const item of vocabulary) {
      const lowerText = item.turkish_text.toLowerCase().trim();
      
      // Check if we have a specific mapping for this word
      if (additionalMappings[lowerText]) {
        const newIcon = additionalMappings[lowerText];
        
        // Update the icon
        await query(
          'UPDATE vocabulary SET svg_icon = ?, updated_at = datetime("now") WHERE id = ?',
          [newIcon, item.id]
        );
        updatedCount++;
      }
    }
    
    console.log(`\n‚úÖ Additional icon enhancement completed!`);
    console.log(`   Icons updated: ${updatedCount}`);
    
    // Show some examples of updated icons
    console.log('\nüîç Sample updated icons:');
    const sample = await query(`
      SELECT turkish_text, svg_icon
      FROM vocabulary
      WHERE svg_icon IN (${Object.values(additionalMappings).map(() => '?').join(',')})
      ORDER BY updated_at DESC
      LIMIT 10
    `, Object.values(additionalMappings));
    
    sample.forEach(item => {
      console.log(`   ${item.turkish_text} -> ${item.svg_icon}`);
    });
    
    // Show final statistics
    const totalCount = await query('SELECT COUNT(*) as count FROM vocabulary WHERE is_active = 1');
    const bookIconCount = await query('SELECT COUNT(*) as count FROM vocabulary WHERE svg_icon = "fas fa-book" AND is_active = 1');
    const otherIconCount = await query('SELECT COUNT(*) as count FROM vocabulary WHERE svg_icon != "fas fa-book" AND is_active = 1');
    
    console.log(`\nüìä Final Statistics:`);
    console.log(`  Total active vocabulary: ${totalCount[0].count}`);
    console.log(`  Items with default book icon: ${bookIconCount[0].count}`);
    console.log(`  Items with meaningful icons: ${otherIconCount[0].count}`);
    console.log(`  Percentage with meaningful icons: ${Math.round((otherIconCount[0].count / totalCount[0].count) * 100)}%`);
    
  } catch (error) {
    console.error('‚ùå Error enhancing additional icons:', error.message);
    process.exit(1);
  }
}

// Run the enhancement
enhanceAdditionalIcons();